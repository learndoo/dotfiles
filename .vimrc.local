" ###############################################
" ################ GENERAL SETTINGS #############
" ###############################################

" AUTOSAVE ON LOST VIM WINDOW FOCUS
"au FocusLost * :wa

" ###############################################
" ################ KEY MAPPINGS #################
" ###############################################
""""" jj as another escape key alternative from insert mode
inoremap jj <ESC>

" ###########################################
" ################ TAB KEYS #################
" ###########################################
nnoremap <silent> tt  :tabnew<CR>
nnoremap <silent> <C-S-Left> :tabprev<CR>
nnoremap <silent> <C-S-Right> :tabnext<CR>
nnoremap <silent> <C-S-Up> :tabm +1<CR>
nnoremap <silent> <C-S-Down> :tabm -1<CR>
""" Or can use UP/DOWN to navigate to first/last tab
"nnoremap <silent> <C-S-Up> :tabfirst<CR>
"nnoremap <silent> <C-S-Down> :tablast<CR>
""" Tab close probably not needed
" nnoremap <silent> tq  :tabclose<CR>
""" But buffer management might be nice
"nnoremap <silent> tr  ???? Show Prev Buffer in Tab ????
"nnoremap <silent> ty  ???? Show Next Buffer in Tab ????

" ##########################################
" ################ AIRLINE #################
" ##########################################
" Configure Airline
" See https://github.com/vim-airline/vim-airline

" Enable airline
let g:airline_powerline_fonts=1

" Speed 
let ttimeoutlen = 10

" #############################################################
" ################ FIX TMUX ARROW KEY SUPPORT #################
" #############################################################
" From https://stackoverflow.com/questions/15445481/mapping-arrow-keys-when-running-tmux
" NOTE: Must also add the following line to ~/.tmux.conf
"       set-option -gw xterm-keys on
"
 if &term =~ '^screen' && exists('$TMUX')
     set mouse+=a
     " tmux knows the extended mouse mode
     set ttymouse=xterm2
     " tmux will send xterm-style keys when xterm-keys is on
     execute "set <xUp>=\e[1;*A"
     execute "set <xDown>=\e[1;*B"
     execute "set <xRight>=\e[1;*C"
     execute "set <xLeft>=\e[1;*D"
     execute "set <xHome>=\e[1;*H"
     execute "set <xEnd>=\e[1;*F"
     execute "set <Insert>=\e[2;*~"
     execute "set <Delete>=\e[3;*~"
     execute "set <PageUp>=\e[5;*~"
     execute "set <PageDown>=\e[6;*~"
     execute "set <xF1>=\e[1;*P"
     execute "set <xF2>=\e[1;*Q"
     execute "set <xF3>=\e[1;*R"
     execute "set <xF4>=\e[1;*S"
     execute "set <F5>=\e[15;*~"
     execute "set <F6>=\e[17;*~"
     execute "set <F7>=\e[18;*~"
     execute "set <F8>=\e[19;*~"
     execute "set <F9>=\e[20;*~"
     execute "set <F10>=\e[21;*~"
     execute "set <F11>=\e[23;*~"
     execute "set <F12>=\e[24;*~"
 endif
" ###### END ##################################################


" #######################################
" ###### VIM TMUX NAVIGATOR CONFIG ######
" #######################################
let g:tmux_navigator_no_mappings = 1

" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1

" Key Mappings - Be sure to also match them in tmux config
if $TMUX !=# ''
  nnoremap <silent> <C-Left> :TmuxNavigateLeft<cr>
  nnoremap <silent> <C-Down> :TmuxNavigateDown<cr>
  nnoremap <silent> <C-Up> :TmuxNavigateUp<cr>
  nnoremap <silent> <C-Right> :TmuxNavigateRight<cr>
else
  nnoremap <silent> <C-Left> <C-w>h
  nnoremap <silent> <C-Up> <C-w>k
  nnoremap <silent> <C-Down> <C-w>j
  nnoremap <silent> <C-Right> <C-w>l
endif

" Autosave with g:tmux_navigator_save_on_switch options
"    1	:update (write the current buffer, but only if changed)
"    2	:wall (write all buffers before navigating from Vim to tmux pane)
"let g:tmux_navigator_save_on_switch = 2
" ###### END ##################################################

" #############################################################
" ##########  NERDTREE CUSTOMIZATION ##########################
" #############################################################
" See https://github.com/scrooloose/nerdtree
" See https://github.com/scrooloose/nerdtree/issues/201#issuecomment-9954740

" Close after opening a file from NerdTree
" let NERDTreeQuitOnOpen = 1
let NERDTreeQuitOnOpen = 0

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Customize NerdTree arrow symbols
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" NERDTree File highlighting
" WARNING! This highlighting may slow things down a lot
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction
"call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
"call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
"call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
"call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
" ###### END ##################################################



